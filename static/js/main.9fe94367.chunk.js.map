{"version":3,"sources":["utils/getGames.ts","utils/apiConfig.ts","pages/List/List.tsx","pages/GameComp/GameComp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["addImagesToGames","resp","gamesWithoutImages","images","map","game","imageId","fields","thumbnail","sys","id","matchedImage","find","url","file","pairGameWithImage","data","items","includes","Asset","apiConfig","useStyles","makeStyles","theme","cardGrid","paddingTop","spacing","paddingBottom","card","height","display","flexDirection","cardContent","flexGrow","List","games","classes","Container","className","maxWidth","Grid","container","length","item","key","name","xs","sm","md","Card","CardActionArea","to","split","join","style","color","textDecoration","CardMedia","component","image","title","CardContent","Typography","variant","GameComp","parsedName","useParams","selectedGame","console","log","notes","Box","pb","steps","step","i","gutterBottom","pt","whiteSpace","Button","wrapper","padding","backgroundColor","minHeight","alignItems","justifyContent","textAlign","App","React","useState","setGames","useEffect","axios","get","then","catch","error","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9fe94367.chunk.js","sourcesContent":["import { GameWithoutImage, Game, Image, Resp } from \"../types\";\n\nexport const pairGameWithImage = (\n  gamesWithoutImages: GameWithoutImage[],\n  images: Image[]\n): Game[] => {\n  return gamesWithoutImages.map((game) => {\n    const imageId = game.fields.thumbnail.sys.id;\n    const matchedImage = images.find(\n      ({ sys: { id } }) => id === imageId\n    ) as Image;\n    const gameWithImage = {\n      fields: {\n        ...game.fields,\n        thumbnail: {\n          ...game.fields.thumbnail,\n          url: matchedImage.fields.file.url,\n        },\n      },\n    };\n    return gameWithImage;\n  });\n};\n\nexport const addImagesToGames = (resp: Resp): Game[] => {\n  const gamesWithoutImages: GameWithoutImage[] = resp.data.items;\n  const images: Image[] = resp.data.includes.Asset;\n  const gamesWithImages: Game[] = pairGameWithImage(gamesWithoutImages, images);\n  return gamesWithImages;\n};\n","export const apiConfig = {\n  spaceId: \"f02ft778pf3z\",\n  accessToken: \"GyXkg9yqxrtMZcw0labND5XdArUaok0AFFtR4aCnZDk\",\n  environmentId: \"master\",\n  baseURI: \"https://cdn.contentful.com\",\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Game } from \"../../types\";\nimport { Link } from \"react-router-dom\";\nimport {\n  CardActionArea,\n  CardContent,\n  CardMedia,\n  Card,\n  Grid,\n  Container,\n  Typography,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n}));\n\ninterface Props {\n  games: (Game | null)[];\n}\n\nconst List: React.FC<Props> = ({ games }) => {\n  const classes = useStyles();\n\n  return (\n    <Container className={classes.cardGrid} maxWidth=\"md\">\n      <Grid container spacing={8}>\n        {games?.length > 0 &&\n          games.map((game) => (\n            <Grid item key={game!.fields.name} xs={12} sm={6} md={6}>\n              <Card className={classes.card}>\n                <CardActionArea>\n                  <Link\n                    to={`/game/${game!.fields.name.split(\" \").join(\".\")}`}\n                    style={{ color: \"inherit\", textDecoration: \"none\" }}\n                  >\n                    <CardMedia\n                      component=\"img\"\n                      image={game!.fields.thumbnail.url}\n                      title={game!.fields.name}\n                    />\n                    <CardContent className={classes.cardContent}>\n                      <Typography variant=\"h5\" component=\"h2\">\n                        {game!.fields.name}\n                      </Typography>\n                    </CardContent>\n                  </Link>\n                </CardActionArea>\n              </Card>\n            </Grid>\n          ))}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { Game } from \"../../types\";\nimport { Typography, Button, Container, Box } from \"@material-ui/core\";\n\ninterface Props {\n  games?: (Game | null)[];\n}\n\nconst GameComp: React.FC<Props> = ({ games }) => {\n  let { name } = useParams();\n  const parsedName = name.split(\".\").join(\" \");\n  const selectedGame = games?.find((game) => game?.fields.name === parsedName);\n  console.log(selectedGame?.fields.notes);\n\n  return selectedGame ? (\n    <Container maxWidth=\"md\">\n      <Box pb={6}>\n        <Typography variant=\"h2\">{selectedGame.fields.name}</Typography>\n      </Box>\n      <Box pb={1}>\n        <Typography variant=\"h4\">STEPS:</Typography>\n      </Box>\n      {selectedGame.fields.steps.map((step, i) => (\n        <Typography key={step} gutterBottom variant=\"body1\">\n          {`${i + 1}. ${step}`}\n        </Typography>\n      ))}\n      <Box pt={6} pb={1}>\n        <Typography variant=\"h4\">NOTES:</Typography>\n      </Box>\n      <Typography\n        gutterBottom\n        variant=\"body1\"\n        style={{ whiteSpace: \"pre-line\" }}\n      >\n        {selectedGame.fields.notes}\n      </Typography>\n      <Box pt={8}>\n        <Link to={`/`}>\n          <Button variant=\"contained\">Back to list</Button>\n        </Link>\n      </Box>\n    </Container>\n  ) : null;\n};\n\nexport default GameComp;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { addImagesToGames } from \"./utils/getGames\";\nimport { apiConfig } from \"./utils/apiConfig\";\nimport { Game } from \"./types\";\n\nimport List from \"./pages/List\";\nimport GameComp from \"./pages/GameComp\";\n\nconst useStyles = makeStyles(() => ({\n  wrapper: {\n    padding: \"24px\",\n    backgroundColor: \"#282c34\",\n    minHeight: \"100vh\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    color: \"white\",\n    textAlign: \"center\",\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [games, setGames] = React.useState<(Game | null)[]>([]);\n  React.useEffect(() => {\n    axios\n      .get(\n        `${apiConfig.baseURI}/spaces/${apiConfig.spaceId}/environments/${apiConfig.environmentId}/entries?access_token=${apiConfig.accessToken}`\n      )\n      .then((resp) => {\n        setGames(addImagesToGames(resp));\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  return (\n    <div className={classes.wrapper}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <List games={games} />\n          </Route>\n          <Route path=\"/game/:name\">\n            <GameComp games={games} />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}